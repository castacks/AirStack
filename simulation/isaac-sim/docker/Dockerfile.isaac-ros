ARG ISAAC_VERSION="4.2.0"
# expects context to be the root of the repository, i.e. AirStack/. this is so we can access AirStack/ros_ws/
FROM nvcr.io/nvidia/isaac-sim:${ISAAC_VERSION}
ARG ISAAC_VERSION
WORKDIR /isaac-sim

# isaac's ros2 launch run_isaacsim.launch.py hardcodes to search in this path, so we have to put the executables here
RUN mkdir -p /root/.local/share/ov/pkg/ && \
    ln -s /isaac-sim /root/.local/share/ov/pkg/isaac-sim-${ISAAC_VERSION}

# allows us to run isaac-sim as root
ENV OMNI_KIT_ALLOW_ROOT=1

# setup environment
ENV LANG=C.UTF-8
ENV LC_ALL=C.UTF-8
ENV ROS_DISTRO=humble

# setup timezone
RUN echo 'Etc/UTC' > /etc/timezone && \
    ln -s /usr/share/zoneinfo/Etc/UTC /etc/localtime && \
    apt-get update && \
    apt-get install -q -y --no-install-recommends tzdata && \
    rm -rf /var/lib/apt/lists/*

# install base packages
RUN apt-get update && apt-get install -q -y --no-install-recommends \
    dirmngr \
    gnupg2 \
    unzip \
    tmux \
    iputils-ping \
    net-tools \
    curl \
    emacs \
    vim \
    nano \
    gdb \
    xterm \
    tree \
    less \
    htop \
    jq \
    git \
    build-essential \
    cmake \
    python3-pip \
    python3-setuptools \
    python3-wheel \
    meson \
    ninja-build \
    wget \
    libcgal-dev && \
    rm -rf /var/lib/apt/lists/*

# setup ros2 key
RUN set -eux; \
    key='C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654'; \
    export GNUPGHOME="$(mktemp -d)"; \
    gpg --batch --keyserver keyserver.ubuntu.com --recv-keys "$key"; \
    mkdir -p /usr/share/keyrings; \
    gpg --batch --export "$key" > /usr/share/keyrings/ros2-latest-archive-keyring.gpg; \
    gpgconf --kill all; \
    rm -rf "$GNUPGHOME"

# setup ros2 apt source
RUN echo "deb [ signed-by=/usr/share/keyrings/ros2-latest-archive-keyring.gpg ] http://packages.ros.org/ros2/ubuntu jammy main" > /etc/apt/sources.list.d/ros2-latest.list

# install ROS2 packages
RUN apt update && apt install -y --no-install-recommends \
    ros-humble-desktop \
    ros-dev-tools \
    python3-rosdep \
    ros-humble-tf2* \
    ros-humble-mavros \
    ros-humble-ackermann-msgs \
    ros-humble-topic-tools \
    ros-humble-grid-map \
    ros-humble-domain-bridge \
    python3-colcon-common-extensions && \
    rm -rf /var/lib/apt/lists/*

# setup mavros dependencies
RUN /opt/ros/humble/lib/mavros/install_geographiclib_datasets.sh

# install python packages
RUN /isaac-sim/python.sh -m pip install git+https://github.com/dronekit/dronekit-python#egg=dronekit && \
    pip install PyYAML mavproxy tmuxp scipy \
    kconfiglib jinja2 empy==3.3.4 jsonschema pyros-genmsg packaging toml numpy future

ARG isaac_dir_name="IsaacSim-ros_workspaces-IsaacSim-${ISAAC_VERSION}"
# Install Isaac Sim ROS2 workspace so that we can run the isaacsim ROS package
RUN cd /tmp/ && \
    curl -L -O https://github.com/isaac-sim/IsaacSim-ros_workspaces/archive/refs/tags/IsaacSim-${ISAAC_VERSION}.zip && \
    unzip IsaacSim-${ISAAC_VERSION}.zip && \
    mv ${isaac_dir_name}/humble_ws /humble_ws && \
    cd /humble_ws && \
    . /opt/ros/humble/setup.sh && \
    colcon build --symlink-install && \
    rm -rf /tmp/IsaacSim-${ISAAC_VERSION}.zip /tmp/${isaac_dir_name}

# Install mavlink-router
RUN git clone https://github.com/mavlink-router/mavlink-router.git --recurse /mavlink-router && \
    cd /mavlink-router && \
    meson setup build . && \
    ninja -C build install && \
    rm -rf /mavlink-router

# TODO: Hacky way to make sure the Isaac Sim app is installed.
# PegasusSimulator extension requires this file to exist
# This is a workaround until we find a better way to ensure the app is installed
RUN mkdir -p /isaac-sim/apps && \
    touch /isaac-sim/apps/isaacsim.exp.base.kit

# "Install" PegasusSimulator extension. This installs in editable mode; when we run the container we mount the PegasusSimulator repo
# over the same directory so that we can edit the code and have it reflected in the container.
WORKDIR /root/Documents/Kit/shared/exts/
RUN git clone https://github.com/PegasusSimulator/PegasusSimulator.git /tmp/PegasusSimulator && \
    mv /tmp/PegasusSimulator/extensions/pegasus.simulator . 
# rm -rf /tmp/PegasusSimulator
ENV ISAACSIM_PATH=/isaac-sim
ENV ISAACSIM_PYTHON=/isaac-sim/python.sh
RUN /isaac-sim/python.sh -m pip install -e ./pegasus.simulator

# build PX4
ARG PX4_VERSION="v1.14.3"
WORKDIR /root
RUN git clone https://github.com/PX4/PX4-Autopilot.git --recursive
RUN ./PX4-Autopilot/Tools/setup/ubuntu.sh

WORKDIR /root/PX4-Autopilot
RUN make px4_sitl
# RUN git clone https://github.com/PX4/PX4-Autopilot.git && \
#     cd PX4-Autopilot && \
#     git checkout ${PX4_VERSION} && \
#     git submodule update --init --recursive && \
#     mkdir -p build/px4_sitl_default && \
#     cd build/px4_sitl_default && \
#     cmake ../.. -G Ninja -DCONFIG=px4_sitl_default && \
#     ninja

RUN /isaac-sim/python.sh -m pip install lark-parser

# copy FastDDS config
COPY docker/fastdds.xml /isaac-sim/fastdds.xml

# Cleanup. Prevent people accidentally doing git commits as root in Docker
RUN apt purge -y git && apt autoremove -y \
    && apt clean -y \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /isaac-sim